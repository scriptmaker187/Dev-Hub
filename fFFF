loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/scriptmaker187/rayfield/refs/heads/main/rayfield.lua"))()

local Window =
    Rayfield:CreateWindow(
    {
        Name = "DEV HUB",
        LoadingTitle = "Made by ! Dev (d.o.n.t)",
        LoadingSubtitle = "Dev on top",
        ConfigurationSaving = {
            Enabled = false,
            FolderName = nil, 
            FileName = "Dev Hub"
        },
        Discord = {
            Enabled = true,
            Invite = "YRhQES2Jwe", 
            RememberJoins = true 
        },
        KeySystem = false, 
        KeySettings = {
            Title = "Key | DEV on Top",
            Subtitle = "Key System",
            Note = "Key is ONLY giving out from Dev",
            FileName = "Devkeys", 
            SaveKey = false, 
            GrabKeyFromSite = false, 
            Key = {"DneGcH5G", "ZQZVdLLj", "4swwT4kO", "X3TcNKey", "PMUFlLbM", "tEffJ7MA", "7YlezXiq", "giDDSyZS", "nuEJGPRZ", "HbTDT40A", "haBSSvmj", "Xc0ZiHXi", "W3FhYSFq", "o2YqdjKl", "XH9qvtFa", "nt9YmM0J", "YrMSlVxd", "okehV3fZ", "4aYr9jvH", "j3BPhwSd", "bxXM80kn", "AV9s9meR", "rZHeQWf3", "He0kWyud", "BgqlBC1h", "eaeGxgjW", "AWebovRO", "fXVwUoLH", "KvSL5TTR", "NyU15E5z", "qwsiDBeT", "r6coVkQJ", "05cLQpZl", "4SxoBrmE", "MueH9S3R", "wYBInmiR", "RiB9ajx4", "s2ib3QyN", "jcMAIu5g", "qEvY14RS", "TGoJgPRf", "oydtgte5", "5nY9qJkC", "dGSAdwjF", "1n5G3Uco", "TMXfZzVZ", "s9a26J7X", "X6HxFuNM", "FFNEAdn1", "VY7Pi7zW", "RL2Onl5L", "Yc8wFenw", "ZIW1pupl", "lbjZ0g5J", "xwcZK2p7", "dAZRP9LM", "zNrGCSQd", "UmhMWSJ9", "UBavqcYl", "M9IFKjbO", "MnRX5tJp", "Ty7CJx4f", "ojdQep32", "zIzSoo7j", "8ANiWHQI", "dCqULiCm", "kOBPYqj0", "19QEF2wq", "y6tnVpRV", "OkcIL8Jr", "ep6IJ8RC", "SdINgphk", "ccWk4Mv4", "mV1DKpfH", "DsSEP2lu", "eczETpkJ", "suWECIkL", "gGtwYSGH", "g9Lj47SI", "atUrLTGp", "M98AOHSt", "AN41CVXw", "aofzIJNg", "jSNoCfyR", "ift5HGCi", "viK4zl09", "8Z1tSmx6", "mOnZt1rU", "j11Ue7yB", "nRwH2fS3", "cjWnz7kf", "J1JiJezZ", "mG2di00y", "3JA8fBpj", "2tXOPcwU", "fDBV6I1C", "m1cVozFM", "8OENeTas", "wPDrp8m4"} 
        }
    }
)

local MainTab = Window:CreateTab("Farm", nil) 

local MainSection = MainTab:CreateSection("Farm")

local Tab = Window:CreateTab("Title", nil)

local Section = Tab:CreateSection("Title")

local PVPTab = Window:CreateTab("PVP", nil)

local section = PVPTab:CreateSection("PVP")

local FreeTab = Window:CreateTab("Free", nil)

local section = FreeTab:CreateSection("Free")

local ScriptTab = Window:CreateTab("Script", nil)

local section = ScriptTab:CreateSection("Script")

local TrollTab = Window:CreateTab("Troll", nil)

local section = TrollTab:CreateSection("Troll")

local AnimalsTab = Window:CreateTab("Animals", nil)

local section = AnimalsTab:CreateSection("Animals")

local DevTab = Window:CreateTab("Dev Version", nil)

local section = DevTab:CreateSection("Dev Version")




local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local orbitRunning = false
local rotation = 0
local distance = 2
local speed = 80
local selectedPlayer = nil
local orbitActivated = false
local toggle_state = false
local orbit1, orbit2, monitorConnection
local horizontalOffset = 0
local verticalOffset = 0
local spawnLoop = nil

local speakerCharacter = nil
local targetCharacter = nil

local function getRoot(character)
    return character and character:FindFirstChild("HumanoidRootPart")
end

local function sendDamageAndPosition(targetPlayer)
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
        local args = {
            [1] = targetPlayer.Character.Humanoid,
            [2] = 1
        }
        ReplicatedStorage.jdskhfsIIIllliiIIIdchgdIiIIIlIlIli:FireServer(unpack(args))

        local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
        local fireballArgs = {
            [1] = targetPosition,
            [2] = "NewFireball"
        }
        ReplicatedStorage.SkillsInRS.RemoteEvent:FireServer(unpack(fireballArgs))
    end
end

local function startScript()
    task.spawn(function()
        while toggle_state do
            local args = { "mantis", "mantis1", "mantisAnim" }
            ReplicatedStorage.Events.SpawnEvent:FireServer(unpack(args))
            task.wait(5)
        end
    end)
end

local function stopScript()
    toggle_state = false
end

local function stopOrbit()
    if orbitActivated then
        orbitRunning = false
        stopScript()
        if orbit1 then orbit1:Disconnect() end
        if orbit2 then orbit2:Disconnect() end
        if monitorConnection then monitorConnection:Disconnect() end

        Rayfield:Notify({
            Title = "DEV HUB",
            Content = "Orbit OFF",
            Duration = 5,
            Image = 4483362458
        })
        orbitActivated = false
    end
end

local function startOrbit(target)
    if not target then return end

    selectedPlayer = target.Name
    orbitRunning = true
    rotation = 0
    toggle_state = true
    task.spawn(startScript)

    local function updateCharacters()
        speakerCharacter = Players.LocalPlayer.Character
        targetCharacter = target.Character
    end

    updateCharacters()

    orbit1 = RunService.Heartbeat:Connect(function()
        if not orbitRunning then return end
        updateCharacters()

        local speakerRoot = getRoot(speakerCharacter)
        local targetRoot = getRoot(targetCharacter)

        if speakerRoot and targetRoot then
            rotation = rotation + speed
            local targetPosition = targetRoot.Position
            local xOffset = math.cos(math.rad(rotation)) * distance + horizontalOffset
            local yOffset = verticalOffset
            local zOffset = math.sin(math.rad(rotation)) * distance
            speakerRoot.CFrame = CFrame.new(targetPosition + Vector3.new(xOffset, yOffset, zOffset))

            sendDamageAndPosition(target)
        end
    end)

    orbit2 = RunService.RenderStepped:Connect(function()
        if not orbitRunning then return end

        local speakerRoot = getRoot(speakerCharacter)
        local targetRoot = getRoot(targetCharacter)

        if speakerRoot and targetRoot then
            speakerRoot.CFrame = CFrame.new(speakerRoot.Position, targetRoot.Position)
        end
    end)

    if not orbitActivated then
        Rayfield:Notify({
            Title = "DEV HUB",
            Content = "Orbit ON target: " .. target.Name,
            Duration = 5,
            Image = 4483362458
        })
        orbitActivated = true
    end

    local isPaused = false
    if monitorConnection then monitorConnection:Disconnect() end
    monitorConnection = RunService.Heartbeat:Connect(function()
        if not orbitActivated then return end

        local char = target.Character
        local humanoid = char and char:FindFirstChild("Humanoid")
        local alive = humanoid and humanoid.Health > 0
        local shield = workspace:FindFirstChild(target.Name)
        local safe = shield and shield:FindFirstChild("SafeZoneShield")

        if not alive or safe then
            if orbitRunning or toggle_state then
                orbitRunning = false
                toggle_state = false
                if not isPaused then
                    isPaused = true
                    Rayfield:Notify({
                        Title = "DEV HUB",
                        Content = "⛔ Paused: target dead or in SafeZone",
                        Duration = 5,
                        Image = 4483362458
                    })
                end
            end
        else
            if not orbitRunning then
                orbitRunning = true
                toggle_state = true
                isPaused = false
                task.spawn(startScript)
                Rayfield:Notify({
                    Title = "DEV HUB",
                    Content = "✅ Resumed: target in combat",
                    Duration = 5,
                    Image = 4483362458
                })
            end
        end
    end)
end

if PVPTab then
    local PlayerDropdown = PVPTab:CreateDropdown({
        Name = "Select a player",
        Options = {},
        CurrentOption = {"None"},
        MultipleOptions = false,
        Flag = "PlayerDropdownFlag",
        Callback = function(Options)
            if Options and #Options > 0 then
                selectedPlayer = Options[1]
                PlayerDropdown:Set({selectedPlayer})
            else
                selectedPlayer = nil
            end
        end,
    })

    local function UpdatePlayerDropdown()
        local playerNames = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(playerNames, player.Name)
        end
        if PlayerDropdown then
            PlayerDropdown:Refresh(playerNames)
        end
    end

    PVPTab:CreateToggle({
        Name = "Orbit Players On/Off",
        CurrentValue = false,
        Flag = "OrbitToggleFlag",
        Callback = function(Value)
            if Value then
                if selectedPlayer then
                    local target = Players:FindFirstChild(selectedPlayer)
                    if target then
                        startOrbit(target)
                    end
                end
            else
                stopOrbit()
            end
        end
    })

    UpdatePlayerDropdown()
    Players.PlayerAdded:Connect(UpdatePlayerDropdown)
    Players.PlayerRemoving:Connect(UpdatePlayerDropdown)
end

local player = Players.LocalPlayer

local function onCharacterAdded(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        local deathPosition = character:GetPrimaryPartCFrame()
        player.CharacterAdded:Wait()
        local newCharacter = player.Character or player.CharacterAdded:Wait()
        local primaryPart = newCharacter:WaitForChild("HumanoidRootPart")
        primaryPart.CFrame = deathPosition
    end)
end

player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then onCharacterAdded(player.Character) end







local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

local selectedPlayer = nil
local attractionActive = false
local attractionForces = {}
local frozenParts = {}

local function UpdatePlayerDropdown()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    return playerNames
end

local function RefreshPlayers()
    local players = UpdatePlayerDropdown()
    if PlayerDropdown then
        PlayerDropdown:Refresh(players)
    end
end

PlayerDropdown = TrollTab:CreateDropdown({
    Name = "Select a player",
    Options = {},
    CurrentOption = {"None"},
    MultipleOptions = false,
    Callback = function(Options)
        if Options and #Options > 0 then
            selectedPlayer = Options[1]
            local target = Players:FindFirstChild(selectedPlayer)
            if target then
                local userId = target.UserId
                local iconUrl = string.format(
                    "https://www.roblox.com/Avatar-thumbnail/image?userId=%d&width=420&height=420&format=png",
                    userId
                )
                StarterGui:SetCore("SendNotification", {
                    Title = "Target Selected",
                    Text = "Now targeting: " .. target.DisplayName,
                    Icon = iconUrl,
                    Duration = 8
                })
            end
        else
            selectedPlayer = nil
        end
    end,
})

RefreshPlayers()
Players.PlayerAdded:Connect(RefreshPlayers)
Players.PlayerRemoving:Connect(RefreshPlayers)

local function IsPlayerFling(player)
    if not (player and player.Character and player.Character:FindFirstChild("HumanoidRootPart")) then
        return false
    end
    local velocity = player.Character.HumanoidRootPart.AssemblyLinearVelocity
    return velocity.Magnitude > 150
end

local function TeleportAndAttractLavaGorilla()
    if not selectedPlayer then return end
    local targetPlayer = Players:FindFirstChild(selectedPlayer)
    if not (targetPlayer and targetPlayer.Character) then return end

    local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    local targetTorso = targetPlayer.Character:FindFirstChild("Torso") or targetPlayer.Character:FindFirstChild("UpperTorso")
    local char = LocalPlayer.Character
    local localHRP = char and char:FindFirstChild("HumanoidRootPart")
    if not (targetHRP and targetTorso and localHRP) then return end

    local lavaGorilla = workspace.NPC:FindFirstChild("LavaGorilla")
    if not (lavaGorilla and lavaGorilla:FindFirstChild("HumanoidRootPart")) then
        StarterGui:SetCore("SendNotification", {
            Title = "Error",
            Text = "LavaGorilla boss not found!",
            Duration = 5
        })
        return
    end

    local bossHRP = lavaGorilla.HumanoidRootPart
    local originalCFrame = localHRP.CFrame

    for _, c in pairs(bossHRP:GetChildren()) do
        if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
            c:Destroy()
        end
    end

    attractionActive = true
    attractionForces = {}

    localHRP.CFrame = bossHRP.CFrame
    task.wait(0.05)

    local elevatedPosition = Vector3.new(targetHRP.Position.X, targetHRP.Position.Y + 50, targetHRP.Position.Z)
    bossHRP.CFrame = CFrame.new(elevatedPosition)
    task.wait(0.05)

    local ForceInstance = Instance.new("BodyPosition")
    ForceInstance.Parent = bossHRP
    ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    ForceInstance.Position = targetTorso.Position
    table.insert(attractionForces, ForceInstance)
    if not table.find(frozenParts, bossHRP) then
        table.insert(frozenParts, bossHRP)
    end

    task.spawn(function()
        while attractionActive do
            task.wait(0.1)
            if not (targetPlayer and targetPlayer.Character) then break end
            local currentTargetTorso = targetPlayer.Character:FindFirstChild("Torso") or targetPlayer.Character:FindFirstChild("UpperTorso")
            if not currentTargetTorso then break end
            for _, force in pairs(attractionForces) do
                if force and force.Parent then
                    force.Position = Vector3.new(currentTargetTorso.Position.X, currentTargetTorso.Position.Y + 20, currentTargetTorso.Position.Z)
                end
            end
            if IsPlayerFling(targetPlayer) then
                StarterGui:SetCore("SendNotification", {
                    Title = "Fling!",
                    Text = targetPlayer.DisplayName .. " has been fling!",
                    Duration = 5
                })
                break
            end
        end
        attractionActive = false
        for _, force in pairs(attractionForces) do
            if force and force.Parent then
                force:Destroy()
            end
        end
        attractionForces = {}
        task.wait(0.1)
        StarterGui:SetCore("SendNotification", {
            Title = "Fling Done",
            Text = "Teleporting back to original position",
            Duration = 3
        })
        task.wait(0.1)
        if localHRP then
            localHRP.CFrame = originalCFrame
        end
    end)
end



local BossTPButton = TrollTab:CreateButton({
    Name = "Fling Lava Gorilla",
    Callback = TeleportAndAttractLavaGorilla
})







local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local toggle_state = false
local scriptRunning = false
local targetPlayerName = ""

local function shootMultipleFireballs(targetPosition)
    local fireballArgs = {
        [1] = targetPosition,
        [2] = "NewFireball"
    }
    local remoteEvent = ReplicatedStorage:WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent")
    for i = 1, 3 do 
        remoteEvent:FireServer(unpack(fireballArgs))
        wait(0.1)
    end
end

local function applyDamageToSelectedPlayer()
    local success, errorMessage = pcall(function()
        local localPlayer = Players.LocalPlayer
        local remoteEvent = ReplicatedStorage:WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent")
        local customRemote = ReplicatedStorage:WaitForChild("jdskhfsIIIllliiIIIdchgdIiIIIlIlIli")

        while scriptRunning do
            if targetPlayerName and targetPlayerName ~= "" then
                local targetPlayer = Players:FindFirstChild(targetPlayerName)
                if targetPlayer then
                    local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
                    if targetCharacter and targetCharacter:FindFirstChild("Humanoid") and targetPlayerName ~= localPlayer.Name then
                        local targetHumanoid = targetCharacter.Humanoid
                        if targetHumanoid and targetHumanoid.Health > 0 then
                            local args = {
                                [1] = "damage",
                                [2] = {
                                    ["EnemyHumanoid"] = targetHumanoid
                                }
                            }
                            remoteEvent:FireServer(unpack(args))
                            customRemote:FireServer(targetHumanoid, "1")
                            shootMultipleFireballs(targetCharacter.HumanoidRootPart.Position)
                            local lightningArgs = {
                                [1] = targetCharacter.HumanoidRootPart.Position,
                                [2] = "NewLightningball"
                            }
                            remoteEvent:FireServer(unpack(lightningArgs))
                        end
                    end
                end
            end
            wait(0)
        end
    end)
end

local function startScript()
    if not scriptRunning then
        scriptRunning = true
        coroutine.wrap(applyDamageToSelectedPlayer)()
    end
end

local function stopScript()
    if scriptRunning then
        scriptRunning = false
    end
end

local PlayerDropdown = PVPTab:CreateDropdown({
    Name = "Select a player",
    Options = {},
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "TargetPlayerDropdownKillFlag",
    Callback = function(Options)
        if Options and #Options > 0 then
            targetPlayerName = Options[1]
            PlayerDropdown:Set({targetPlayerName})
        else
            targetPlayerName = ""
        end
    end,
})

local function UpdatePlayerDropdown()
    local playerNames = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    if PlayerDropdown then
        PlayerDropdown:Refresh(playerNames)
    end
end

local ToggleButton = PVPTab:CreateToggle({
    Name = "🎯 Kill Target Player",
    CurrentValue = false,
    Flag = "KillTargetToggleFlag",
    Callback = function(state)
        if state and not toggle_state then
            toggle_state = true
            startScript()
        elseif not state and toggle_state then
            toggle_state = false
            stopScript()
        end
    end
})

UpdatePlayerDropdown()
Players.PlayerAdded:Connect(UpdatePlayerDropdown)
Players.PlayerRemoving:Connect(UpdatePlayerDropdown)









excludedPlayerNames = {} 
scriptState = {running = false, toggle = false, titleCoroutine = nil, damageCoroutine = nil} 


functions = {}


functions.spawnSpider = function()
    game:GetService("ReplicatedStorage").Events.SpawnEvent:FireServer("axolotl", "axolotl3", "axolotl_Amim")
    print("Spider spawned")
end


functions.continuousTitleChange = function(titleEvent)
    while scriptState.toggle do
        titleEvent:FireServer("None")
        titleEvent:FireServer("NoviceHunter")
        task.wait(0)
    end
end


functions.continuousDamage = function(damageEvent)
    local localPlayer = game.Players.LocalPlayer
    while scriptState.toggle do
        pcall(function()
            damageEvent:FireServer(localPlayer.Character.Humanoid, 1) 
        end)
        task.wait(0.3) 
    end
end


functions.applyDamageLoop = function()
    local localPlayer = game.Players.LocalPlayer
    local damageEvent = game:GetService("ReplicatedStorage").jdskhfsIIIllliiIIIdchgdIiIIIlIlIli 
    while scriptState.toggle do
        local damageArgs = {
            [1] = localPlayer.Character.Humanoid,
            [2] = 1  
        }
        local successDamage, damageError = pcall(function()
            damageEvent:FireServer(unpack(damageArgs)) 
        end)
        
        if not successDamage then
            print("Error applying damage: " .. damageError)
        end
        task.wait(0.2) 
    end
end


functions.processAllPlayers = function()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local carryEvent = game:GetService("ReplicatedStorage").Events.CarryEvent
    local titleEvent = game:GetService("ReplicatedStorage").Events.TitleEvent

    while scriptState.running do
        
        for _, targetPlayer in ipairs(players:GetPlayers()) do
            if targetPlayer ~= localPlayer and not table.find(excludedPlayerNames, targetPlayer.Name) then
                local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
                if targetCharacter then
                    
                    functions.spawnSpider()

                    
                    pcall(function()
                        localPlayer.Character:SetPrimaryPartCFrame(targetCharacter.HumanoidRootPart.CFrame)
                    end)
                    print("Teleported to player: " .. targetPlayer.Name)

                    
                    task.wait(0.3)  

                    
                    pcall(function()
                        carryEvent:FireServer(targetPlayer, "request_accepted")
                    end)
                    print("Carry executed on: " .. targetPlayer.Name)

                    
                    task.wait(0.3)  

                    
                    task.wait(0.4)  
                else
                    print("Player character not found: " .. targetPlayer.Name)
                end
            else
                print("Skipping excluded player: " .. targetPlayer.Name)
            end

            
            if not scriptState.running then
                print("Stopping player processing due to scriptState.running = false")
                break
            end
        end
        
        if not scriptState.running then
            break
        end
    end
end


functions.startScript = function()
    if not scriptState.running then
        scriptState.running = true
        print("Script started.")
        coroutine.wrap(functions.processAllPlayers)() 

        
        scriptState.titleCoroutine = coroutine.wrap(functions.continuousTitleChange)(game:GetService("ReplicatedStorage").Events.TitleEvent)
        scriptState.damageCoroutine = coroutine.wrap(functions.continuousDamage)(game:GetService("ReplicatedStorage").Events.NPCDamageEvent)

        
        scriptState.applyDamageCoroutine = coroutine.wrap(functions.applyDamageLoop)()
    end
end


functions.stopScript = function()
    if scriptState.running then
        scriptState.running = false
        scriptState.toggle = false
        print("Script stopped.")

        
        if scriptState.titleCoroutine then
            coroutine.close(scriptState.titleCoroutine)
            scriptState.titleCoroutine = nil
        end
        if scriptState.damageCoroutine then
            coroutine.close(scriptState.damageCoroutine)
            scriptState.damageCoroutine = nil
        end
        if scriptState.applyDamageCoroutine then
            coroutine.close(scriptState.applyDamageCoroutine)
            scriptState.applyDamageCoroutine = nil
        end
    end
end


local ToggleButton = PVPTab:CreateToggle({
    Name = "🎯 Insta Kill All Players",
    Callback = function(state)
        if state then
            print("Enable Insta Kill Sequence")
            scriptState.toggle = true
            functions.startScript()
        else
            print("Disable Insta Kill Sequence")
            functions.stopScript()
        end
    end
})

local Input = PVPTab:CreateInput({
    Name = "Exclude Player Names",
    PlaceholderText = "Enter player names to exclude, separated by commas...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        excludedPlayerNames = {}
        for name in string.gmatch(Text, "[^,]+") do
            table.insert(excludedPlayerNames, name:match("^%s*(.-)%s*$"))
        end
        print("Excluded player names set to: " .. table.concat(excludedPlayerNames, ", "))
    end
})










local toggle_state = false
local NewLoop = false
local savedpos = nil
local dummytarget = nil


local function shootMultipleFireballs(targetPosition)
    
    for _ = 10, 5 do 
        task.spawn(function()
            local fireballArgs = {
                [1] = targetPosition,
                [2] = "NewFireball"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent"):FireServer(unpack(fireballArgs))
            task.wait(0) 
        end)
    end
end


local ToggleButton = MainTab:CreateToggle(
    {
        Name = "🔥 Farm 5k",
        Callback = function(state)
            if state and not toggle_state then
                toggle_state = true
                NewLoop = true
                print("enable 5k")

                
                savedpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                local Character = game.Players.LocalPlayer.Character

                
                local dummyLevel, search
                if game.Players.LocalPlayer.leaderstats.Level.Value > 5000 then
                    dummyLevel = "Dummy2"
                    dummyName = "5k_dummies"
                    search = game:GetService("Workspace").MAP[dummyName]
                else
                    dummyLevel = "Training Dummy"
                    search = game:GetService("Workspace").MAP.dummies
                end
                dummytarget = search:FindFirstChild(dummyLevel)

                
                if dummytarget then
                    Character.HumanoidRootPart.CFrame = dummytarget.HumanoidRootPart.CFrame + Vector3.new(3, 0, 0)
                else
                    print("Kein Ziel-Dummy gefunden.")
                    return
                end

                
                task.spawn(function()
                    while NewLoop do
                        task.wait(0) 

                        
                        game:GetService("ReplicatedStorage").jdskhfsIIIllliiIIIdchgdIiIIIlIlIli:FireServer(dummytarget.Humanoid, 1)

                        
                        shootMultipleFireballs(dummytarget.HumanoidRootPart.Position)

                        
                        local lightningArgs = {
                            [1] = dummytarget.HumanoidRootPart.Position,
                            [2] = "NewLightningball"
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent"):FireServer(unpack(lightningArgs))
                    end
                end)
            elseif not state and toggle_state then
                toggle_state = false
                NewLoop = false
                print("disable 5k")

                
                if savedpos then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = savedpos
                end
            end
        end
    }
)




local toggle_state = false
local NewLoop = false
local savedpos = nil
local dummytarget = nil


local function shootMultipleFireballs(targetPosition)
    
    for _ = 10, 5 do 
        task.spawn(function()
            local fireballArgs = {
                [1] = targetPosition,
                [2] = "NewFireball"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent"):FireServer(unpack(fireballArgs))
            task.wait(0) 
        end)
    end
end


local ToggleButton = MainTab:CreateToggle(
    {
        Name = "🔥 Farm Normal",
        Callback = function(state)
            if state and not toggle_state then
                toggle_state = true
                NewLoop = true
                print("enable 5k")

                
                savedpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                local Character = game.Players.LocalPlayer.Character

                
                local dummyLevel, search
                if game.Players.LocalPlayer.leaderstats.Level.Value > 5000 then
                    dummyLevel = "Dummy"
                    dummyName = "dummies"
                    search = game:GetService("Workspace").MAP.dummies
                else
                    dummyLevel = "Dummy"
                    search = game:GetService("Workspace").MAP.dummies
                end
                dummytarget = search:FindFirstChild(dummyLevel)

                
                if dummytarget then
                    Character.HumanoidRootPart.CFrame = dummytarget.HumanoidRootPart.CFrame + Vector3.new(3, 0, 0)
                else
                    print("Kein Ziel-Dummy gefunden.")
                    return
                end

                
                task.spawn(function()
                    while NewLoop do
                        task.wait(0) 

                        
                        game:GetService("ReplicatedStorage").jdskhfsIIIllliiIIIdchgdIiIIIlIlIli:FireServer(dummytarget.Humanoid, 1)

                        
                        shootMultipleFireballs(dummytarget.HumanoidRootPart.Position)

                        
                        local lightningArgs = {
                            [1] = dummytarget.HumanoidRootPart.Position,
                            [2] = "NewLightningball"
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("SkillsInRS"):WaitForChild("RemoteEvent"):FireServer(unpack(lightningArgs))
                    end
                end)
            elseif not state and toggle_state then
                toggle_state = false
                NewLoop = false
                print("disable 5k")

                
                if savedpos then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = savedpos
                end
            end
        end
    }
)


local toggle_state = false
local coinLoopActive = false


local function startCoinLoop()
    coinLoopActive = true
    while coinLoopActive do
        wait()
        game:GetService("ReplicatedStorage").Events.CoinEvent:FireServer()
    end
end


local ToggleButton = MainTab:CreateToggle(
    {
        Name = "⚜ Coins",
        Callback = function(state)
            if state and not toggle_state then
                toggle_state = true
                print("enable Coins")
                
                
                spawn(startCoinLoop)

            elseif not state and toggle_state then
                toggle_state = false
                print("disable Coins")
                
                
                coinLoopActive = false
            end
        end
    }
)



local toggle_state = false
local bossKillingActive = false

local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("jdskhfsIIIllliiIIIdchgdIiIIIlIlIli")
local player = game.Players.LocalPlayer
local bosses = {
    "DragonGiraffe", "Griffin", "LavaGorilla", "CENTAUR", "BOSSBEAR", "CRABBOSS", "BOSSDEER"
}

local function serverSideTeleport(targetCFrame)
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    if syn and syn.set_hidden_property then
        syn.set_hidden_property(hrp, "NetworkIsSleeping", true)
        syn.set_hidden_property(hrp, "CFrame", targetCFrame)
    elseif sethiddenproperty then
        sethiddenproperty(hrp, "NetworkIsSleeping", true)
        sethiddenproperty(hrp, "CFrame", targetCFrame)
    else
        hrp.CFrame = targetCFrame
    end
end

local function fireEventUntilHpDrops(humanoid)
    local maxAttempts = 10
    local attempt = 0
    local lastHp = humanoid.Health

    while attempt < maxAttempts and humanoid.Health == lastHp and humanoid.Health > 0 do
        remoteEvent:FireServer(humanoid)
        task.wait(0.2)
        attempt = attempt + 1
    end

    return humanoid.Health < lastHp
end

local function forceKill(humanoid)
    for _ = 1, 20 do
        pcall(function()
            if humanoid.Health > 0 then
                humanoid.Health = 0
            end
        end)
        if humanoid.Health <= 0 then
            break
        end
        task.wait(0.1)
    end
end

local function killAllBosses()
    while bossKillingActive do
        for _, bossName in ipairs(bosses) do
            if not bossKillingActive then break end

            local boss = workspace:FindFirstChild("NPC") and workspace.NPC:FindFirstChild(bossName)
            if boss and boss:FindFirstChild("Humanoid") and boss:FindFirstChild("HumanoidRootPart") then
                local bossHumanoid = boss.Humanoid
                local bossHRP = boss.HumanoidRootPart

                if bossHumanoid.Health > 0 then
                    serverSideTeleport(bossHRP.CFrame * CFrame.new(0, 3, 0))

                    local eventSuccess = fireEventUntilHpDrops(bossHumanoid)
                    if eventSuccess then
                        forceKill(bossHumanoid)
                    end

                    task.wait(0.1)
                end
            end
        end
        task.wait(1)
    end
end

local ToggleButton = MainTab:CreateToggle({
    Name = "👹 Farm Bosses",
    Callback = function(state)
        if state and not toggle_state then
            toggle_state = true
            bossKillingActive = true
            task.spawn(killAllBosses)
        elseif not state and toggle_state then
            toggle_state = false
            bossKillingActive = false
        end
    end
})









local toggle_state = false
local scriptRunning = false


local function applyDamageToOthers()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer

    while scriptRunning do
        for _, player in pairs(players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
                local args = {
                    [1] = "damage",
                    [2] = {
                        ["EnemyHumanoid"] = player.Character.Humanoid
                    }
                }
                
                game:GetService("ReplicatedStorage").SkillsInRS.RemoteEvent:FireServer(unpack(args))

                
                wait(0.1)
            end
        end
    end
end


local function startScript()
    if not scriptRunning then
        scriptRunning = true
        spawn(applyDamageToOthers)
    end
end


local function stopScript()
    if scriptRunning then
        scriptRunning = false
        print("Script stopped")
    end
end


local ToggleButton = Tab:CreateToggle(
    {
        Name = "😈 Farm Kills All",
        Callback = function(state)
            if state and not toggle_state then
                toggle_state = true
                print("enable Kill All")
                
                
                startScript()
            elseif not state and toggle_state then
                toggle_state = false
                print("disable Kill All")

                
                stopScript()
            end
        end
    }
)


local Button =
    MainTab:CreateButton(
    {
        Name = "💤 Anti afk",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/xpzrmodzz/anti-afk/main/Anti%20afk"))()
            print("AntiAFK Enabled")
            Rayfield:Notify({Title = "Notification", Content = "Anti-AFK aktiviert!", Duration = 6.5, Image = 4483362458})
        end
    }
)




local toggle_state, KillAura = false, false

local function startKillAura()
    while KillAura do
        local success, errorMessage = pcall(function()
            local friendlies, Team = {}, nil
            local Teams = game.Workspace.Teams
            for _, v in pairs(Teams:GetDescendants()) do
                if v:IsA("StringValue") and v.Value == game.Players.LocalPlayer.Name then
                    Team = tostring(v.Parent.Name)
                    break
                end
            end

            if Team then
                for _, v in pairs(Teams:FindFirstChild(Team):GetChildren()) do
                    if v:IsA("StringValue") then table.insert(friendlies, v.Value) end
                end
            end

            local PlayerList, Min = {}, math.huge
            for _, SearchPlayer in pairs(game.Players:GetPlayers()) do
                if SearchPlayer ~= game.Players.LocalPlayer and not table.find(friendlies, SearchPlayer.Name) then
                    local character, humanoid = SearchPlayer.Character, SearchPlayer.Character and SearchPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local Mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude
                        table.insert(PlayerList, {Player = SearchPlayer, Magnitude = Mag})
                        Min = math.min(Min, Mag)
                    end
                end
            end

            table.sort(PlayerList, function(a, b) return a.Magnitude < b.Magnitude end)

            if PlayerList[1] and PlayerList[1].Magnitude < 20 then
                local targetHumanoid = PlayerList[1].Player.Character.Humanoid
                if targetHumanoid and targetHumanoid.Health > 0 then
                    game:GetService("ReplicatedStorage").jdskhfsIIIllliiIIIdchgdIiIIIlIlIli:FireServer(targetHumanoid, "1")
                    print(targetHumanoid.Health .. "/" .. targetHumanoid.MaxHealth)
                end
            end
        end)

        if not success then print("Error: " .. errorMessage) end
        wait(0.2)
    end
end

local ToggleButton = PVPTab:CreateToggle({
    Name = "👽 Kill Aura (fast but not in safezone)",
    Callback = function(state)
        toggle_state, KillAura = state, state
        print(state and "enable Kill Aura" or "disable Kill Aura")
        if state then spawn(startKillAura) end
    end
})




local toggle_state = false
local Hitbox = false
local Transparency = 0.5
local HeadSize = 1

local function startHitbox()
    while Hitbox do
        local success, result = pcall(function()
            local friendlies = {}
            local Team
            local Teams = game.Workspace.Teams

            for _, v in pairs(Teams:GetDescendants()) do
                if v:IsA("StringValue") then
                    if v.Value == game.Players.LocalPlayer.Name then
                        Team = tostring(v.Parent.Name)
                    end
                end
            end

            if Team then
                for _, v in pairs(Teams:FindFirstChild(Team):GetChildren()) do
                    if v:IsA("StringValue") then
                        table.insert(friendlies, v.Value)
                    end
                end
            end

            for _, v in pairs(game:GetService('Players'):GetPlayers()) do
                if v.Name ~= game:GetService('Players').LocalPlayer.Name and Hitbox then
                    local rootPart = v.Character.HumanoidRootPart
                    if table.find(friendlies, v.Name) then
                        rootPart.Size = Vector3.new(0.1, 0.1, 0.1)
                        rootPart.Transparency = Transparency
                    else
                        rootPart.Size = Vector3.new(HeadSize, HeadSize, HeadSize)
                        rootPart.Transparency = Transparency
                    end
                    rootPart.BrickColor = BrickColor.new("Black")
                    rootPart.Material = "Plastic"
                    rootPart.CanCollide = true
                end
            end
        end)

        if not success then
            print(result)
        end
        wait(10)
    end

    for _, v in pairs(game:GetService('Players'):GetChildren()) do
        if v.Name ~= game:GetService('Players').LocalPlayer.Name then
            local rootPart = v.Character.HumanoidRootPart
            rootPart.Size = Vector3.new(0.7, 1.6, 0.92)
            rootPart.Transparency = 1
            rootPart.BrickColor = BrickColor.new("Black")
            rootPart.Material = "Plastic"
            rootPart.CanCollide = true
        end
    end
end

local function startFireballs()
    -- Placeholder function for future implementation
end

local ToggleButton = PVPTab:CreateToggle(
    {
        Name = "👻 Hitbox",
        Callback = function(state)
            toggle_state = state
            if state then
                print("enable Hitbox")
                Hitbox = true
                spawn(startHitbox)
                spawn(startFireballs)
            else
                print("disable Hitbox")
                Hitbox = false
            end
        end
    }
)

local Slider = PVPTab:CreateSlider(
    {
        Name = "Hitbox Size",
        Range = {1, 50},
        Increment = 1,
        Suffix = "Size",
        CurrentValue = 1,
        Flag = "Slider1",
        Callback = function(value)
            HeadSize = value
            print("Head Size set to " .. HeadSize)
        end
    }
)

local TransparencySlider = PVPTab:CreateSlider(
    {
        Name = "Hitbox Transparency",
        Range = {0, 1},
        Increment = 0.1,
        Suffix = "",
        CurrentValue = 0.5,
        Flag = "Slider2",
        Callback = function(value)
            Transparency = value
            print("Transparency set to " .. Transparency)
        end
    }
)


local CoreGui = game:GetService("CoreGui")
local VoiceChatService = game:GetService("VoiceChatService")
local StarterGui = game:GetService("StarterGui")

local vcCheckRunning = false
local vcLoopTask = nil
local lastVCState = nil

local function StartVCBypassLoop()
    vcLoopTask = task.spawn(function()
        while vcCheckRunning do
            local found = false

            local success, micGui = pcall(function()
                return CoreGui:FindFirstChild("toggle_mic_mute", true)
            end)

            if success and micGui and micGui:IsA("GuiObject") then
                found = true
            end

            if found then
                if lastVCState ~= "voice_on" then
                    StarterGui:SetCore("SendNotification", {
                        Title = "DEV HUB",
                        Text = "Voice On 🎤",
                        Duration = 7
                    })
                    lastVCState = "voice_on"
                end
            else
                if lastVCState ~= "voice_banned" then
                    StarterGui:SetCore("SendNotification", {
                        Title = "DEV HUB",
                        Text = "Voice Banned 🚫",
                        Duration = 7
                    })

                    pcall(function()
                        VoiceChatService:JoinVoice()
                    end)

                    StarterGui:SetCore("SendNotification", {
                        Title = "DEV HUB",
                        Text = "VC Bypass ON ✅",
                        Duration = 7
                    })

                    lastVCState = "voice_banned"
                end
            end

            task.wait(0.5)
        end
    end)
end

local VCToggle = ScriptTab:CreateToggle({
    Name = "🎤 Auto Voice Chat Bypass",
    CurrentValue = false,
    Flag = "VCBypassToggleFlag",
    Callback = function(state)
        if state and not vcCheckRunning then
            vcCheckRunning = true
            StartVCBypassLoop()
        elseif not state and vcCheckRunning then
            vcCheckRunning = false
            vcLoopTask = nil
        end
    end
})



local Slider = ScriptTab:CreateSlider(
    {
        Name = "Speed",
        Range = {16, 250},
        Increment = 10,
        Suffix = "Ws",
        CurrentValue = 10,
        Flag = "Slider1",
        Callback = function(v)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
        end,
    }
)


local Button = FreeTab:CreateButton({
    Name = "☀ Give Fireball",
    Callback = function()
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local LocalPlayer = Players.LocalPlayer

        local function giveFireball()
            local tool = Instance.new("Tool")
            tool.Name = "Fireball"
            tool.RequiresHandle = false
            tool.CanBeDropped = false
            tool.ManualActivationOnly = false
            tool.Enabled = true
            tool.Archivable = true
            tool.Parent = LocalPlayer:FindFirstChildOfClass("Backpack") or LocalPlayer.Backpack

            local mouse = LocalPlayer:GetMouse()
            local remoteEvent = ReplicatedStorage:FindFirstChild("SkillsInRS") and ReplicatedStorage.SkillsInRS:FindFirstChild("RemoteEvent")
            if not remoteEvent then return end

            local function shootFireball()
                if not tool.Enabled then return end
                local clickPosition = mouse.Hit.Position
                remoteEvent:FireServer(clickPosition, "NewFireball")
            end

            tool.Activated:Connect(shootFireball)

            game:GetService("UserInputService").InputBegan:Connect(function(input, gp)
                if gp then return end
                if input.UserInputType == Enum.UserInputType.Touch then
                    shootFireball()
                end
            end)

            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "DEV HUB",
                Text = "Fireball gived!",
                Duration = 5
            })
        end

        giveFireball()

        LocalPlayer.CharacterAdded:Connect(function()
            task.wait(1)
            giveFireball()
        end)
    end
})


local Button =
    ScriptTab:CreateButton(
    {
        Name = "♾ Infinite Yield",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
        end
    }
)


local Button =
    ScriptTab:CreateButton(
    {
        Name = "👾 Fates Admin",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/fatesc/fates-admin/main/main.lua"))();
        end
    }
)




local Button = 
    ScriptTab:CreateButton(
    {
        Name = "❕ low detail",
        Callback = function()
            loadstring(game:HttpGet("https://pastebin.com/raw/uXA9zP76", true))()
        end
    }
)


local Button =
    ScriptTab:CreateButton(
    {
        Name = "® RTX",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/xpzrmodzz/script-RTX/main/RTX"))()
        end
    }
)


local Button = TrollTab:CreateButton(
    {
        Name = "Dev Chat Logger",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/scriptmaker187/Chat-Logger/refs/heads/main/Dev-Hub"))()
        end
    }
)


local Button = AnimalsTab:CreateButton({
    Name = "🐔 Unlock Chickens",
    Callback = function()
        local event = game:GetService("ReplicatedStorage"):WaitForChild("ChickenEvent"):WaitForChild("RemoteEvent")

        for i = 1, 100 do
            event:FireServer({
                action = "craft",
                element_table = {}
            })

            event:FireServer({
                action = "craft",
                element_table = { "Grass" }
            })

            event:FireServer({
                action = "craft",
                element_table = { "Ice" }
            })

            event:FireServer({
                action = "craft",
                element_table = { "Fire" }
            })

            event:FireServer({
                action = "craft",
                element_table = { "Grass", "Ice", "Fire" }
            })
        end
    end
})



local Button = TrollTab:CreateButton({
    Name = "💢 Crash Server",
    Callback = function()
        local Players = game:GetService("Players")
        local StarterGui = game:GetService("StarterGui")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")

        local Player = Players.LocalPlayer
        local running = true

        StarterGui:SetCore("SendNotification", {
            Title = "☠️ Permadeath",
            Text = "Please wait " .. Players.RespawnTime .. " seconds"
        })

        replicatesignal(Player.ConnectDiedSignalBackend)
        task.wait(Players.RespawnTime + 0.2)
        replicatesignal(Player.Kill)

        local RespawnEvent = Instance.new("BindableEvent")
        RespawnEvent.Event:Once(function()
            running = false
            StarterGui:SetCore("SendNotification", {
                Title = "🌀 Respawning",
                Text = "Please wait " .. Players.RespawnTime .. " seconds"
            })
            StarterGui:SetCore("ResetButtonCallback", true)
            replicatesignal(Player.ConnectDiedSignalBackend)
        end)

        StarterGui:SetCore("ResetButtonCallback", RespawnEvent)

        task.wait(6)

        local args = {
            {
                action = "shoot"
            }
        }

        local event = ReplicatedStorage:WaitForChild("ChickenEvent"):WaitForChild("RemoteEvent")

        for i = 1, 140 do
            task.spawn(function()
                for j = 1, 20000 do
                    if not running then break end
                    event:FireServer(unpack(args))
                end
            end)
        end
    end
})



local toggle_state = false
local targetGiftText = "DEV ON TOP" 


local function startScript()
    local localPlayer = game:GetService("Players").LocalPlayer

    spawn(function()
        while toggle_state do
            
            local players = game:GetService("Players"):GetPlayers()

            
            local items = {
                { toolname = "Pizza", gift = targetGiftText },
                { toolname = "Fish", gift = targetGiftText },
                { toolname = "Chickenleg", gift = targetGiftText },
                { toolname = "RoseB", gift = targetGiftText },
            }

            for _, player in ipairs(players) do
                if player ~= localPlayer then
                    for _, item in ipairs(items) do
                        if not toggle_state then return end  
                        local args = {
                            [1] = {
                                ["toolname"] = item.toolname,
                                ["gift"] = item.gift,
                                ["oplr"] = player,
                                ["action"] = "give"
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("GiveEvent"):FireServer(unpack(args))
                    end
                    wait(0.01) 
                end
            end
        end
    end)
end


local function stopScript()
    toggle_state = false  
end


local ToggleButton = TrollTab:CreateToggle({
    Name = "🎁 Item Spam",
    Callback = function(state)
        if state and not toggle_state then
            toggle_state = true
            print("Enable Item Spam")
            startScript()
        elseif not state and toggle_state then
            print("Disable Item Spam")
            stopScript()
        end
    end
})


local Input = TrollTab:CreateInput({
    Name = "Enter Gift Text",  
    PlaceholderText = "Enter gift text...", 
    RemoveTextAfterFocusLost = false,  
    Callback = function(Text)
        targetGiftText = "\"" .. Text .. "\"" 
        print("Gift text set to: " .. targetGiftText)
    end
})




local function sendInvitation(clanName)
    local args = {
        [1] = {
            ["teamIcon"] = "",
            ["action"] = "accepted",
            ["teamName"] = clanName or "Ez scripts"  
        }
    }

    
    pcall(function()
        game:GetService("ReplicatedStorage"):WaitForChild("invitationEvent"):FireServer(unpack(args))
        print("Invitation sent with clan name: " .. clanName)
    end)
end


local SendButton = TrollTab:CreateButton({
    Name = "📩 Join Pack",  
    Callback = function()
        if targetClanName == "" then
            print("Please enter a clan name.")
            return
        end

        
        sendInvitation(targetClanName)
    end
})


local ClanNameInput = TrollTab:CreateInput({
    Name = "Enter Clan Name",  
    PlaceholderText = "Enter the name of the clan",  
    RemoveTextAfterFocusLost = false,  
    Callback = function(Text)
        targetClanName = Text  
        print("Clan name set to: " .. targetClanName)
    end
})



local InviteSpammerEnabled = false


local function startInviteSpammer()
    InviteSpammerEnabled = true
    print("Invite spammer activated.")
    
    
    spawn(function()
        while InviteSpammerEnabled do
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                
                if player ~= game.Players.LocalPlayer then
                    local args = {
                        [1] = {
                            ["action"] = "invite_clan",
                            ["oplr"] = player
                        }
                    }
                    pcall(function()
                        game:GetService("ReplicatedStorage"):WaitForChild("invitationEvent"):FireServer(unpack(args))
                    end)
                end
            end
            wait(0.1)  
        end
    end)
end


local function stopInviteSpammer()
    InviteSpammerEnabled = false
    print("Invite spammer deactivated.")
end


local ToggleButton = TrollTab:CreateToggle({
    Name = "🏆 Clan Invite Spammer (be in a pack)",  
    Callback = function(state)
        if state then
            startInviteSpammer()  
        else
            stopInviteSpammer()   
        end
    end
})



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local otherStats = player:WaitForChild("otherstats")
local kills = otherStats:WaitForChild("Kill")
local screenGui, frame, titleLabel, killsLabel, killsGainedFrame, killsGainedLabel, killsGainedTitle
local isWindowVisible = false
local previousKills = kills.Value  -- Variable für die gespeicherten Kills zu Beginn
local killsGained = 0  -- Variable für die "Kills Gained" (dazugekommene Kills)

-- Funktion zum Erstellen des Kills-Fensters
local function createKillsWindow()
    if not screenGui then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "KillsWindow"
        screenGui.Parent = player:WaitForChild("PlayerGui")
        screenGui.ResetOnSpawn = false

        -- Das Haupt-Kills-Fenster
        frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 220, 0, 75)
        frame.Position = UDim2.new(0, 10, 1, -125)  -- Nach oben verschoben, um nicht unter anderen GUIs zu verschwinden
        frame.BackgroundColor3 = Color3.new(0.388235, 0.376471, 0.376471)
        frame.BackgroundTransparency = 0.5
        frame.BorderSizePixel = 0
        frame.Visible = false
        frame.Parent = screenGui

        frame.ZIndex = 1000

        -- Abgerundete Ecken
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 12)  -- Abgerundete Ecken mit einem Radius von 12
        corner.Parent = frame

        -- Farbverlauf Hintergrund
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(24, 24, 24)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(45, 45, 45))
        })
        gradient.Parent = frame

        -- Titel
        titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0.3, 0)
        titleLabel.Position = UDim2.new(0, 0, 0, 0)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = "Kills:"
        titleLabel.TextSize = 20
        titleLabel.TextColor3 = Color3.new(0.713725, 0.019608, 0.713725)
        titleLabel.TextXAlignment = Enum.TextXAlignment.Center
        titleLabel.TextYAlignment = Enum.TextYAlignment.Center
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.Parent = frame

        -- Kill-Anzeige
        killsLabel = Instance.new("TextLabel")
        killsLabel.Size = UDim2.new(1, 0, 0.7, 0)
        killsLabel.Position = UDim2.new(0, 0, 0.3, 0)
        killsLabel.BackgroundTransparency = 1
        killsLabel.Text = kills.Value .. " Kills"
        killsLabel.TextSize = 24
        killsLabel.TextColor3 = Color3.new(1.000000, 0.000000, 0.831373)  -- Schöne rosa Farbe
        killsLabel.TextXAlignment = Enum.TextXAlignment.Center
        killsLabel.TextYAlignment = Enum.TextYAlignment.Center
        killsLabel.Font = Enum.Font.GothamBold
        killsLabel.Parent = frame

        -- Text Update bei Kills
        kills.Changed:Connect(function()
            killsLabel.Text = kills.Value .. " Kills"
        end)
    end
end

-- Funktion zum Erstellen des "Kills Gained"-Fensters
local function createKillsGainedWindow()
    if not killsGainedFrame then
        -- Kills Gained Fenster
        killsGainedFrame = Instance.new("Frame")
        killsGainedFrame.Size = UDim2.new(0, 220, 0, 60)
        killsGainedFrame.Position = UDim2.new(0, 10, 1, -190)  -- Etwas höher als das normale Kills-Fenster
        killsGainedFrame.BackgroundColor3 = Color3.new(0.388235, 0.376471, 0.376471)
        killsGainedFrame.BackgroundTransparency = 0.5
        killsGainedFrame.BorderSizePixel = 0
        killsGainedFrame.Visible = false
        killsGainedFrame.Parent = screenGui

        killsGainedFrame.ZIndex = 999

        -- Abgerundete Ecken für Kills Gained
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 12)  -- Abgerundete Ecken
        corner.Parent = killsGainedFrame

        -- Farbverlauf Hintergrund für Kills Gained
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(24, 24, 24)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(45, 45, 45))
        })
        gradient.Parent = killsGainedFrame

        -- Titel für Kills Gained
        killsGainedTitle = Instance.new("TextLabel")
        killsGainedTitle.Size = UDim2.new(1, 0, 0.3, 0)
        killsGainedTitle.Position = UDim2.new(0, 0, 0, 0)
        killsGainedTitle.BackgroundTransparency = 1
        killsGainedTitle.Text = "Kills Gained:"
        killsGainedTitle.TextSize = 18
        killsGainedTitle.TextColor3 = Color3.new(0.713725, 0.019608, 0.713725)
        killsGainedTitle.TextXAlignment = Enum.TextXAlignment.Center
        killsGainedTitle.TextYAlignment = Enum.TextYAlignment.Center
        killsGainedTitle.Font = Enum.Font.GothamBold
        killsGainedTitle.Parent = killsGainedFrame

        -- Kills Gained Anzeige
        killsGainedLabel = Instance.new("TextLabel")
        killsGainedLabel.Size = UDim2.new(1, 0, 0.7, 0)
        killsGainedLabel.Position = UDim2.new(0, 0, 0.3, 0)
        killsGainedLabel.BackgroundTransparency = 1
        killsGainedLabel.Text = killsGained .. " Kills Gained"
        killsGainedLabel.TextSize = 22
        killsGainedLabel.TextColor3 = Color3.new(1.000000, 0.000000, 0.831373)  -- Schöne rosa Farbe
        killsGainedLabel.TextXAlignment = Enum.TextXAlignment.Center
        killsGainedLabel.TextYAlignment = Enum.TextYAlignment.Center
        killsGainedLabel.Font = Enum.Font.GothamBold
        killsGainedLabel.Parent = killsGainedFrame
    end
end

-- Funktion zum Aktualisieren der Kills Gained
local function updateKillsGained()
    local gained = kills.Value - previousKills  -- Berechnung der dazubekommenen Kills
    killsGained = gained  -- Setze die aktuellen dazukommenden Kills
    killsGainedLabel.Text = killsGained .. " Kills Gained"
end

-- Toggle Funktion für das Hauptfenster
local function toggleKillsWindow(value)
    isWindowVisible = value
    if frame then
        frame.Visible = isWindowVisible
    end
    if killsGainedFrame then
        killsGainedFrame.Visible = isWindowVisible
    end
end

createKillsWindow()
createKillsGainedWindow()

-- Wenn der Spieler respawnt, bleibt das GUI erhalten
local function onCharacterAdded(character)
    if isWindowVisible then
        frame.Visible = true
        killsGainedFrame.Visible = true
    else
        frame.Visible = false
        killsGainedFrame.Visible = false
    end
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Event für Kills Updates
kills.Changed:Connect(function()
    updateKillsGained()
end)

local success, err = pcall(function()
    if Tab then
        Tab:CreateToggle({
            Name = "Kills Display",
            CurrentValue = false,
            Flag = "KillsToggle",
            Callback = function(Value)
                toggleKillsWindow(Value)
            end,
        })
    else
        warn("MainTab n'est pas défini.")
    end
end)

if not success then
    warn("Fehler bei der Erstellung des Toggles: ", err)
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

local Player = Players.LocalPlayer
local scrollingFrame = Player.PlayerGui:WaitForChild("WeaponsGUI"):WaitForChild("weaponFrame"):WaitForChild("bodyFrame"):WaitForChild("body2Frame"):WaitForChild("scrollingFrame")

local secretWeapons = {
    "S7",
    "S8",
    "SSS4",
    "SSSS1",
    "SSSS2",
    "SSSSSSS2",
    "SSSSSSS4"
}

local function isSecretWeapon(name)
    for _, v in ipairs(secretWeapons) do
        if v == name then return true end
    end
    return false
end

local weaponNames = {}
local weaponImages = {}
local normalWeapons = {}

-- Sammle Waffen aus GUI
for _, frame in pairs(scrollingFrame:GetChildren()) do
    if frame:IsA("Frame") and frame.Name:match("^S+%d*$") then
        local gamepass = frame:FindFirstChild("gamepass")
        if gamepass then
            local weaponName = frame.Name
            local imageLabel = frame:FindFirstChild("Frame") and frame.Frame:FindFirstChild("Button") and frame.Frame.Button:FindFirstChild("ImageLabel")
            if imageLabel then
                local weaponImage = imageLabel.Image
                if not isSecretWeapon(weaponName) then
                    table.insert(normalWeapons, weaponName)
                    weaponImages[weaponName] = weaponImage
                end
            end
        end
    end
end

-- WeaponName-Liste formatieren
local categorizedWeaponNames = {}
for _, name in ipairs(secretWeapons) do
    table.insert(categorizedWeaponNames, "Secret - " .. name)
    weaponImages[name] = nil
end
for _, name in ipairs(normalWeapons) do
    table.insert(categorizedWeaponNames, "Premium - " .. name)
end

-- Weapon Selection
local selectedWeapon
local selectedWeaponImage

if FreeTab then
    local Dropdown = FreeTab:CreateDropdown({
        Name = "Select a weapon",
        Options = categorizedWeaponNames,
        CurrentOption = {"None"},
        MultipleOptions = false,
        Flag = "WeaponDropdownFlag",
        Callback = function(Options)
            if Options and #Options > 0 then
                local label = Options[1]
                local weapon = label:match("%- (.+)$")
                selectedWeapon = weapon
                selectedWeaponImage = weaponImages[weapon]

                StarterGui:SetCore("SendNotification", {
                    Title = "Weapon Visualizer",
                    Text = "You selected: " .. weapon,
                    Icon = selectedWeaponImage or "",
                    Duration = 4
                })
            else
                selectedWeapon = nil
                selectedWeaponImage = nil
            end
        end,
    })

    FreeTab:CreateButton({
        Name = "Give Weapon",
        Callback = function()
            if selectedWeapon then
                -- Serveraufruf
                ReplicatedStorage:WaitForChild("Events"):WaitForChild("WeaponEvent"):FireServer(selectedWeapon)

                -- Selbst killen
                local char = Player.Character
                if char then
                    local humanoid = char:FindFirstChild("Humanoid")
                    if humanoid then humanoid.Health = 0 end
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if hrp then hrp:BreakJoints() end
                end

                StarterGui:SetCore("SendNotification", {
                    Title = "Weapon Gived",
                    Text = selectedWeapon .. " wurde vergeben.",
                    Duration = 4
                })
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "Fehler",
                    Text = "Keine Waffe ausgewählt.",
                    Duration = 4
                })
            end
        end
    })
end



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local lp = Players.LocalPlayer
local mouse = lp:GetMouse()
local currentnpc = nil
local possessedCharacter = nil
local highlight = Instance.new("Highlight")
highlight.Parent = lp
highlight.FillTransparency = 1
highlight.OutlineTransparency = 1
local medium = TweenInfo.new(.67)
local rad = 150
local followConn = nil

local function light(adornee, color)
	task.spawn(function()
		highlight.Adornee = adornee
		highlight.OutlineColor = color
		TweenService:Create(highlight, medium, {OutlineTransparency = 0}):Play()
		task.wait(.5)
		TweenService:Create(highlight, medium, {OutlineTransparency = 1}):Play()
	end)
end

local function isnpc(model)
	if not model or not model:IsA("Model") then return false end
	if Players:GetPlayerFromCharacter(model) then return false end
	if model:FindFirstChildOfClass("Humanoid") then return true end
	return false
end

local function getHRP(model)
	if not model then return nil end
	return model:FindFirstChild("HumanoidRootPart") or model.PrimaryPart
end

local function safePartOwnerCheck(part)
	if not part then return false end
	if part:IsA("BasePart") and part.Anchored == false then
		return true
	end
	return false
end

local function changeHumanoidState(npc, state)
	if not npc then return end
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then
		pcall(function() hum:ChangeState(state) end)
	end
end

local function teleportNPCAway(npc)
	if not npc then return end
	local part = getHRP(npc)
	if part and safePartOwnerCheck(part) then
		npc:PivotTo(CFrame.new(0,1000,0))
	end
end

local function toggleSit(npc)
	if not npc then return end
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then
		hum.Sit = not hum.Sit
	end
end

local function followNPC(npc)
	if followConn then followConn:Disconnect() followConn = nil end
	if not npc then return end
	followConn = RunService.RenderStepped:Connect(function()
		if not npc or not npc.Parent then
			if followConn then followConn:Disconnect() followConn = nil end
			return
		end
		local part = getHRP(npc)
		if part and safePartOwnerCheck(part) and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
			local hum = npc:FindFirstChildOfClass("Humanoid")
			if hum then
				hum:MoveTo(lp.Character.HumanoidRootPart.Position + Vector3.new(-4,0,0))
			end
		else
			light(npc, Color3.fromRGB(255,0,0))
			if followConn then followConn:Disconnect() followConn = nil end
		end
	end)
end

local function stopFollow()
	if followConn then followConn:Disconnect() followConn = nil end
end

RunService.RenderStepped:Connect(function()
	if lp then
		lp.SimulationRadius = rad
	end
end)

local selectEnabled = false

mouse.Button1Down:Connect(function()
	if not selectEnabled then return end
	local t = mouse.Target
	if not t then return end
	local model = t:FindFirstAncestorOfClass("Model")
	if model and isnpc(model) then
		local hrp = getHRP(model)
		if hrp and safePartOwnerCheck(hrp) then
			currentnpc = model
			light(currentnpc, Color3.fromRGB(0,255,0))
			if Rayfield and Rayfield.Notify then
				Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name .. " is now selected", Duration=4, Image=4483362458})
			end
		else
			light(model, Color3.fromRGB(255,0,0))
			if Rayfield and Rayfield.Notify then
				Rayfield:Notify({Title="NPC Control", Content="Invalid target", Duration=3.5, Image=4483362458})
			end
		end
	end
end)

local function possessNPC(npc)
	if not npc or not lp.Character then return end
	possessedCharacter = lp.Character
	lp.Character = npc
	if Workspace.CurrentCamera then
		Workspace.CurrentCamera.CameraSubject = npc:FindFirstChildOfClass("Humanoid") or npc.PrimaryPart
	end
	local move = 0.01
	local possessConn
	possessConn = RunService.PreSimulation:Connect(function()
		local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
		if lp.Character and hum and hum.RootPart then
			hum.RootPart.CFrame = hum.RootPart.CFrame + Vector3.new(0, move, 0)
			move = -move
		else
			if possessConn then possessConn:Disconnect() possessConn = nil end
		end
	end)
end

local function unpossessNPC()
	if possessedCharacter then
		lp.Character = possessedCharacter
		if Workspace.CurrentCamera and possessedCharacter:FindFirstChildOfClass("Humanoid") then
			Workspace.CurrentCamera.CameraSubject = possessedCharacter:FindFirstChildOfClass("Humanoid")
		end
		possessedCharacter = nil
	end
end

DevTab:CreateToggle({
	Name = "Enable NPC Selection",
	CurrentValue = false,
	Flag = "EnableNPCSelection",
	Callback = function(val)
		selectEnabled = val
		if not val then
			currentnpc = nil
			stopFollow()
		end
		if Rayfield and Rayfield.Notify then
			Rayfield:Notify({Title="NPC Control", Content="NPC selection "..(val and "enabled" or "disabled"), Duration=3.5, Image=4483362458})
		end
	end,
})

DevTab:CreateToggle({
	Name = "Control NPC",
	CurrentValue = false,
	Flag = "ControlNPC",
	Callback = function(val)
		if val then
			if currentnpc then
				local part = getHRP(currentnpc)
				if part and safePartOwnerCheck(part) then
					possessNPC(currentnpc)
					if Rayfield and Rayfield.Notify then Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name .. " is now under Control", Duration=4, Image=4483362458}) end
				else
					light(currentnpc, Color3.fromRGB(255,0,0))
				end
			else
				if Rayfield and Rayfield.Notify then Rayfield:Notify({Title="NPC Control", Content="No NPC selected", Duration=4, Image=4483362458}) end
			end
		else
			unpossessNPC()
			stopFollow()
			if Rayfield and Rayfield.Notify then Rayfield:Notify({Title="NPC Control", Content="Released Control", Duration=4, Image=4483362458}) end
		end
	end,
})

DevTab:CreateButton({
	Name = "Kill NPC",
	Callback = function()
		if currentnpc then
			local part = getHRP(currentnpc)
			if part and safePartOwnerCheck(part) then
				local hum = currentnpc:FindFirstChildOfClass("Humanoid")
				if hum then
					hum.Health = 0
					if Rayfield and Rayfield.Notify then Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name.." killed", Duration=3.5, Image=4483362458}) end
				end
			else
				light(currentnpc, Color3.fromRGB(255,0,0))
				if Rayfield and Rayfield.Notify then Rayfield:Notify({Title="NPC Control", Content="Cannot kill: invalid target", Duration=3.5, Image=4483362458}) end
			end
		end
	end
})

DevTab:CreateButton({
	Name = "TP NPC to Player",
	Callback = function()
		if currentnpc and lp.Character then
			local npcPart = getHRP(currentnpc)
			local charPart = getHRP(lp.Character)
			if npcPart and charPart and safePartOwnerCheck(npcPart) then
				currentnpc:PivotTo(charPart.CFrame)
				if Rayfield and Rayfield.Notify then
					Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name.." teleported to player", Duration=3.5, Image=4483362458})
				end
			else
				light(currentnpc, Color3.fromRGB(255,0,0))
			end
		end
	end
})

DevTab:CreateButton({
	Name = "TP to NPC",
	Callback = function()
		if currentnpc and lp.Character then
			local npcPart = getHRP(currentnpc)
			local char = lp.Character
			if npcPart and safePartOwnerCheck(npcPart) then
				char:PivotTo(currentnpc:GetPivot())
				if Rayfield and Rayfield.Notify then
					Rayfield:Notify({Title="NPC Control", Content="Teleported to "..currentnpc.Name, Duration=3.5, Image=4483362458})
				end
			else
				light(currentnpc, Color3.fromRGB(255,0,0))
			end
		end
	end
})

DevTab:CreateButton({
	Name = "Send NPC Away",
	Callback = function()
		if currentnpc then
			local part = getHRP(currentnpc)
			if part and safePartOwnerCheck(part) then
				teleportNPCAway(currentnpc)
				if Rayfield and Rayfield.Notify then
					Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name.." sent away", Duration=3.5, Image=4483362458})
				end
			else
				light(currentnpc, Color3.fromRGB(255,0,0))
			end
		end
	end
})

DevTab:CreateButton({
	Name = "Toggle Sit NPC",
	Callback = function()
		if currentnpc then
			local part = getHRP(currentnpc)
			if part and safePartOwnerCheck(part) then
				toggleSit(currentnpc)
				if Rayfield and Rayfield.Notify then
					Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name.." toggled sit", Duration=3.5, Image=4483362458})
				end
			else
				light(currentnpc, Color3.fromRGB(255,0,0))
			end
		end
	end
})

DevTab:CreateToggle({
	Name = "Follow Player",
	CurrentValue = false,
	Flag = "NPCFollow",
	Callback = function(val)
		if val then
			if currentnpc then
				local part = getHRP(currentnpc)
				if part and safePartOwnerCheck(part) then
					followNPC(currentnpc)
					if Rayfield and Rayfield.Notify then
						Rayfield:Notify({Title="NPC Control", Content=currentnpc.Name.." is following you", Duration=3.5, Image=4483362458})
					end
				else
					light(currentnpc, Color3.fromRGB(255,0,0))
				end
			end
		else
			stopFollow()
			if Rayfield and Rayfield.Notify then
				Rayfield:Notify({Title="NPC Control", Content="Stopped following", Duration=3.5, Image=4483362458})
			end
		end
	end
})




Rayfield:LoadConfiguration()
